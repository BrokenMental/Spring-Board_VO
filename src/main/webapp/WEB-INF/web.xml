<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

<!-- web.xml은 태그의 순서가 정해져 있다. -->
  <display-name>Archetype Created Web Application</display-name>
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/applicationContext.xml</param-value>
    </context-param>

    <!-- UTF-8 인코딩처리 -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- PUT,PATCH 방식은 제공하지 않는 브라우저에서 POST 방식으로 PUT 방식을 사용 할 수 있게 해주는 필터 -->
    <filter>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- 웹서버가 구동될 때 DispatchServlet을 이용해 특정 확장자를 매핑한다. -->
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- 확장자 처리 매핑 지원, name 태그 안의 이름+(-servlet.xml)을 찾아간다. 확장자를 해당 패턴으로 매핑힌다.-->
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- html,js,css 등 RUN 상황에서 로드되지 못하고 404 되어버리는 파일들을 적용 시키는 방법 -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.jpg</url-pattern>
    </servlet-mapping>

    <!-- Error Page 관련 -->
    <!-- 아래 location 과 같이 URL 매핑을 사용하려면 controller 단에서 mapping 경로를 설정 해 줘야한다. -->
    <error-page>
        <exception-type>java.lang.Throwable</exception-type>
        <location>/ErrorPage/throwable</location>
    </error-page>
    <error-page>
        <exception-type>java.lang.Exception</exception-type>
        <location>/ErrorPage/exception</location>
    </error-page>
    <error-page>
        <error-code>400</error-code>
        <location>/ErrorPage/400</location>
    </error-page>
    <error-page>
        <error-code>403</error-code>
        <location>/ErrorPage/403</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/ErrorPage/404</location>
    </error-page>
    <error-page>
        <error-code>405</error-code>
        <location>/ErrorPage/405</location>
    </error-page>
    <error-page>
        <error-code>415</error-code>
        <location>/ErrorPage/415</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/ErrorPage/500</location>
    </error-page>
    <error-page>
        <error-code>503</error-code>
        <location>/ErrorPage/503</location> <!-- WEB-INF/views/ErrorPage/~~.jsp 절대경로는 컨트롤러를 거치지 않는다. -->
    </error-page>

</web-app>
